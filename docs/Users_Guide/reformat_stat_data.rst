****************************
Reformat MET Point Stat Data
****************************


Description
===========

The METreformat module provides support for reformatting/rearranging MET .stat output into METplotpy-readable
input formats.  The MET .stat ASCII output generated by MET tools such as the point-stat, grid-stat, and
ensemble-stat tools can contain ASCII columnar data from multiple line types (determined by settings in the
MET configuration file, ).
As a result, there are numerous rows of data that do not have the same number of columns.  All MET .stat line types
have some columns in common, all of which are labelled (i.e. the columns have headers/names).  The remaining columns
are unlabelled.  These unlabelled columns need to be rearranged from a wide format (numerous columns)
to a long format (fewer columns but more rows).

Initially, METviewer was used to generate plots using MET output data. This was accomplished by loading the MET
.stat files into the METviewer database, then performing a query
to subset the data of interest. The format of the data from the query result may vary, based on line type and the
requested plot type.  METviewer invokes the appropriate METplotpy plot script using the results from
the database query.  Each METplotpy plotting scripts require input data in a specific format.

Users now have the option to generate plots without the use of METviewer and its database.
Plots can be generated by METplotpy from the command line with a YAML configuration file. However,
the format of the input must match what is expected by the plot type, typically based on the
line type of the input data.  Any .stat output from the point-stat, grid-stat, or ensemble-stat
tool will need to be reformatted before using the METplotpy scripts from the command line.

Description of Formats:
-----------------------

The reformatted data contains additional columns, based on the type of
plot.

**Reformatting for
line, bar, box, contour, performance diagram, revision box, revision series, and taylor diagram**

After reformatting, the .stat data contains the following columns (replacing the unlabelled
columns in the original .stat file):

Two columns for statistics

- stat_name

- stat_value

Four columns for confidence levels (normal and bootstrap)

- stat_bcl

    - upper level bootstrap confidence limit

- stat_bcu

    - lower level bootstrap confidence limit

- stat_ncl

   - lower level normal confidence limit

- stat_ncu

  - upper level normal confidence limit


The corresponding line types for the above plots are as follows:

- FHO
    - from point-stat or grid-stat

- CNT
   - from point-stat or grid-stat

- CTC
   - from point-stat or grid-stat

- CTS
   - from point-stat or grid-stat

- SL1L2
   - from point-stat or grid-stat

- VL1L2
   - from point-stat or grid-stat

- ECNT
    - from point-stat or ensemble-stat

- MCTS
    - from point-stat

- VCNT
    - from point-stat or grid-stat

- RHIST
    - from ensemble-stat

**Reformatting for ROC diagrams**
The ROC diagram can be created from PCT line type data (from the MET point-stat, grid-stat, or
ensemble-stat tools).  The reformatted .stat file contains these columns, replacing the
unlabelled columns:

thresh_i
    - the ith probability threshold value (repeated)

oy_i
    - number of observations *yes* when forecast is between the ith and i+1th
      probability threshold

on_i
   - number of observations when *no* forecast is between the ith and i+1th
      probability threshold

i_value
   - the threshold number


The PCT line type consists of a **variable** number of unlabelled columns/headers
corresponding to THRESH_i, OY_i, and ON_i, as described in the MET User's Guide:
https://met.readthedocs.io/en/latest/Users_Guide/.
These columns corresponding to OY_1, OY_2, ,,,. OY_m (where *m*
is the THRESH_i*th* value) are unlabelled when generated by the MET tool.
These unlabelled columns are appropriately labelled to OY_1,..., OY_m values, ON_1, .., ON_m,
and THRESH_1,..., THRESH_m.  These labelled columns are then ordered into the thresh_i, oy_i, on_i, and i_value
columns.  The i_value column is derived from the ith value of OY, ON, and THRESH.
The thresh_i column consists of the threshold values for the threshold number defined in the i_value column.
The oy_i and on_i columns contain the OY_i and ON_i values from the .stat data.

**Reformatting for rank histogram**

The rank histogram plot can be created from the RHIST line type data (from the MET
ensemble-stat tool).  The reformatted .stat file contains these columns, replacing the
unlabelled columns (corresponding to the variable number of columns corresponding to
rank_1, ..., rank_n):

rank_i
 - count of observations with the ith rank (repeated)

i_value
 -  the rank number


Other plot types require additional special columns.  Support for reformatting the remaining linetypes for
the remaining point-stat, grid-stat, and ensemble-stat MET output will be added.

Required Components
===================

METdbLoad modules are used to find and collect data from the individual .stat files into
one data structure.  The input .stat files must all reside under one directory. The path to the
input data is specified in a YAML configuration file.

The YAML configuration file is also used to indicate the name and
location of the output file, logging information (filename, log level),
and the line type to read in and reformat:

.. literalinclude:: ../../../METdataio/METreformat/reformat_stat.yaml

Copy this custom config file from the directory where the source code
was saved to the working directory.

**Modify the YAML configuration file**

Edit the reformat_stat.yaml config file:
.. literalinclude:: ../../../METdataio/METreformat/reformat_stat.yaml

Refer to the following details for each of the mandatory settings in the configuration file.



####To Do Drop-down goes here####




Example
=======

- set up a base directory, where the METdataio source code is located

.. code-block:: ini

   bash:
   export BASE_DIR=/path/to/METdataio

   csh:
   setenv BASE_DIR /path/to/METdataio

- replace /path/to with an actual path

- set up a working directory, where the YAML config file will be located

.. code-block:: ini

   bash:
   export WORKING_DIR=/path/to/working_dir

   csh:
   setenv WORKING_DIR /path/to/working_dir



- **NOTE**: Do NOT use environment variables for /path/to, specify the actual path.

- set the PYTHONPATH:


.. code-block:: ini

  bash
  export PYTHONPATH=$BASE_DIR:/$BASE_DIR/METdbLoad:$BASE_DIR/METdbLoad/ush:$BASE_DIR/METreformat

  csh
  setenv PYTHONPATH $BASE_DIR:/$BASE_DIR/METdbLoad:$BASE_DIR/METdbLoad/ush:$BASE_DIR/METreformat


Generate the reformatted file:
------------------------------

   - place the .stat data of interest (output from MET tool) into a single directory
     * NOTE*: This may require  reorganization of data that is distributed over numerous directories into
     a single directory.

   - modify the **reformat_stat.yaml** file, indicating the *input directory*,
     *output directory*, *output file name*, *line stat to reformat*, and
     *logging settings* (log level, log filename, log directory). Refer to the
     **Definition of Configuration Settings** above for a description of each setting.


.. code-block:: ini

   python $BASE_DIR/METreformat/write_stat_ascii.py $WORKING_DIR/*line_type*_stat.yaml


- A text file will be created in the output directory with the file name that was specified in the yaml file.
